name: Render and Deploy with Docker

on:
  schedule:
    - cron: '0 18 * * *'  # 每天北京时间凌晨2点运行（UTC 18:00）
  workflow_dispatch:      # 允许手动触发
  push:
    branches: [ master ]    # master 分支有推送时也触发
    paths:
      - 'data/lottery_data.json'
      - 'lottery-vis/**'
      - '.github/workflows/**'

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    container:
      image: rocker/verse:4.2.0  # 使用与原工作流相同版本的R
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Configure Git
        run: |
          git config --global --add safe.directory /__w/fetch-data/fetch-data
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2
        with:
          version: 1.4.549

      - name: Install Additional R Packages
        run: |
          install.packages(c('plotly', 'DT'), repos = 'https://cloud.r-project.org')
        shell: Rscript {0}

      - name: Render Quarto Project
        uses: quarto-dev/quarto-actions/render@v2
        with:
          to: dashboard
          path: lottery-vis/lottery-dashboard.qmd

      - name: Deploy to GitHub Pages
        run: |
          # 保存渲染的文件到临时目录
          mkdir -p /tmp/rendered
          cp -r lottery-vis/lottery-dashboard.html /tmp/rendered/
          cp -r lottery-vis/lottery-dashboard_files /tmp/rendered/ || true
          
          # 创建一个重定向的index.html
          echo '<!DOCTYPE html>
          <html>
            <head>
              <meta http-equiv="refresh" content="0; url=./lottery-dashboard.html">
            </head>
            <body>
              <p>Please wait while you are redirected to the <a href="./lottery-dashboard.html">dashboard</a>.</p>
            </body>
          </html>' > /tmp/rendered/index.html
          
          # 切换到gh-pages分支
          git fetch origin gh-pages
          git checkout gh-pages
          
          # 清理当前目录（保留.git）
          find . -maxdepth 1 ! -name '.git' ! -name '.' -exec rm -rf {} +
          
          # 复制新文件
          cp -r /tmp/rendered/* .
          
          # 提交并推送
          git add -A
          git commit -m "Update GitHub Pages"
          git push origin gh-pages 